diff --git a/Grasp.iml b/Grasp.iml
index b119da9..b54ec5d 100644
--- a/Grasp.iml
+++ b/Grasp.iml
@@ -7,10 +7,14 @@
       <sourceFolder url="file://$MODULE_DIR$/src/main/groovy" isTestSource="false" />
       <excludeFolder url="file://$MODULE_DIR$/build/classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/dependency-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
+      <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="$groovy_library_name$" level="application" />
+    <orderEntry type="library" name="$spock_library_name$" level="application" />
   </component>
 </module>
 
diff --git a/build.gradle b/build.gradle
index 6e6ca75..0ec85c2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,9 +1,14 @@
 defaultTasks = ['test']
-usePlugin 'groovy'
 
-repositories { mavenCentral() }
+apply plugin: 'groovy'
+
+repositories {
+    mavenCentral()
+    mavenRepo urls: "http://m2repo.spockframework.org/snapshots"
+}
 
 dependencies {
     groovy      "org.codehaus.groovy:groovy-all:1.7.0"
+    compile     "org.spockframework:spock-core:0.4-SNAPSHOT"
     testCompile "junit:junit:4.7"
 }
\ No newline at end of file
diff --git a/src/test/groovy/com/canoo/grasp/StoreTest.groovy b/src/test/groovy/com/canoo/grasp/StoreTest.groovy
index bab4f2e..b292584 100644
--- a/src/test/groovy/com/canoo/grasp/StoreTest.groovy
+++ b/src/test/groovy/com/canoo/grasp/StoreTest.groovy
@@ -1,46 +1,77 @@
 package com.canoo.grasp
 
-class StoreTest extends GroovyTestCase {
+import spock.lang.Specification
+
+class StoreTest extends Specification {
 
     Store store = new Store()
     PresentationModel pm = new OneSimpleAttributePM(model: [attribute: 'value'])
 
-    void testSaveAndFind() {
-        store.save pm
-        assertEquals 1, OneSimpleAttributePM.count()
-        assertSame pm, OneSimpleAttributePM.findByAttribute('value')
+    def "find must work after save performed"() {
+        when:
+            store.save pm
+
+        then:
+            1 == OneSimpleAttributePM.count()
+            pm.is(OneSimpleAttributePM.findByAttribute('value'))
+    }
+
+    def "listener is notified after a save"() {
+        setup:
+            def found
+            def listener = [added:{found = it}] as IStoreListener
+
+        when:
+            store.addStoreListener OneSimpleAttributePM, listener
+            store.save pm
+
+        then:
+            found == pm
     }
 
-    void testStoreListenerOnSave(){
-        def found
-        def listener = [added:{found = it}] as IStoreListener
-        store.addStoreListener OneSimpleAttributePM, listener
-        store.save pm
-        assert found == pm
+    def "listener is not notified twice after two saves"(){
 
-        found = null
-        store.save pm
-        assert found == null, "no added notification when saving known objects"
+        setup:
+            def found
+            def listener = [added:{found = it}] as IStoreListener
+
+        when:
+            store.addStoreListener OneSimpleAttributePM, listener
+            store.save pm
+            found = null
+            store.save pm
+
+        then: 
+            found == null
     }
 
-    void testStoreListenerOnDelete(){
-        def deleted
-        def listener = [deleted:{deleted = it}] as IStoreListener
-        store.save pm
-        store.addStoreListener OneSimpleAttributePM, listener
-        deleted = null
-        pm.delete()
-        assert deleted == pm
-        assert OneSimpleAttributePM.list() == []
+    def "listener is notified on delete"(){
+        setup:
+            def deleted
+            def listener = [deleted:{deleted = it}] as IStoreListener
+
+        when:
+            store.save pm
+            store.addStoreListener OneSimpleAttributePM, listener
+            pm.delete()
+
+        then:
+            deleted == pm
+            OneSimpleAttributePM.list() == []
     }
 
-    void testRemoveStoreListener(){
-        def found
-        def listener = [added:{found = it}] as IStoreListener
-        store.addStoreListener OneSimpleAttributePM, listener
-        store.removeStoreListener OneSimpleAttributePM, listener
-        store.save pm
-        assert found == null
+    def "listener is not updated after being removed"(){
+        setup:
+            def found
+            def listener = [added: { found = it } ] as IStoreListener
+
+        when:
+            store.addStoreListener OneSimpleAttributePM, listener
+            store.removeStoreListener OneSimpleAttributePM, listener
+            store.save pm
+
+        then:
+            found == null
     }
 
-}
\ No newline at end of file
+}
